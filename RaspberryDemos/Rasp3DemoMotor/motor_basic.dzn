import button.dzn;

interface IMotorControl {
	in void start();
	in void stop();

	behaviour {
		enum State { Idle, Running };
		State state = State.Idle;
		
		[state.Idle]
		{
			on start: state = State.Running;
			on stop: {}
		}
		
		[state.Running]
		{
			on start: illegal;
			on stop: state = State.Idle;
		}		
	}	
}

subint speedrange{0..5};

component MotorControlB {
	provides IMotorControl api;	
	requires IButton toggle;
	requires IMotorGlue device;
	
	behaviour {
	
		enum State { Idle, Running};
		State state = State.Idle;
		bool actualForward = true;
		
		[state.Idle]
		{
			on api.start(): { state = State.Running; toggle.start();}
			on api.stop(): {}
			on toggle.turnedOn(): {}
		}
		[state.Running]
		{
			on api.stop(): { state = State.Idle; toggle.stop();}
			on toggle.turnedOn(): {
				if (actualForward) device.forward();
				else 			device.backward();
				actualForward = !actualForward;
			}
			on toggle.turnedOff(): {}
		}
	}
}

component motorTestSystemB{
	provides IMotorControl api;
	requires IButtonGlue itoggle;
	requires IMotorGlue imotor;


	system {
		MotorControlB mc;
		Button toggle;
		
		api <=> mc.api;
		itoggle <=> toggle.glue;
		imotor <=> mc.device;
		mc.toggle <=> toggle.api;

	}	
}

