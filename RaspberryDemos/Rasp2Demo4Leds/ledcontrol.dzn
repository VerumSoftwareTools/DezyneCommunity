import button.dzn;

interface ILedsControl {
	in void start();
	in void stop();

	behaviour {
		enum State { Idle, Running };
		State state = State.Idle;
		
		[state.Idle] {
			on start: state = State.Running;
			on stop: {}
		}
		[state.Running] {
			on start: illegal;
			on stop: state = State.Idle;
		}		
	}	
}

subint speedrange{0..5};

component ledsControl {
	provides ILedsControl api;	
	requires IButton btn1;
	requires IButton btn2;
	requires IButton btn3;
	requires IButton btn4;
	requires ILedsGlue device;
	
	behaviour {
		enum State { Idle, Starting, Active};
		State state = State.Idle;
		
		[state.Idle] {
			on api.start(): {
				btn1.start(); btn2.start(); btn3.start(); btn4.start();
				device.led1Off(); device.led2Off(); device.led3Off(); device.led4Off();	
				state = State.Starting;
			}
			on api.stop(): {}
		}
		[state.Starting] {
			on api.stop(): {
				btn1.stop(); btn2.stop(); btn3.stop(); btn4.stop();
				state = State.Idle;
			}
			on btn1.turnedOn(): {
				device.led1On();
				state = State.Active;
			}			
			on btn2.turnedOn(): {
				device.led2On();
				state = State.Active;
			}	
			on btn3.turnedOn(): {
				device.led3On();
				state = State.Active;
			}
			on btn4.turnedOn(): {
				device.led4On();
				state = State.Active;
			}			
			on btn1.turnedOff(), btn2.turnedOff(), btn3.turnedOff(), btn4.turnedOff(): {}
		}
		[state.Active] { // simplified model: no strict handling of alternating led status
			on api.stop(): {
				btn1.stop(); btn2.stop(); btn3.stop(); btn4.stop();
				device.led1Off(); device.led2Off(); device.led3Off(); device.led4Off();
				state = State.Idle;
			}					
			on btn1.turnedOff(): {
				device.led1Off();
			}						
			on btn2.turnedOff(): {
				device.led2Off();
			}						
			on btn3.turnedOff(): {
				device.led3Off();
			}						
			on btn4.turnedOff(): {
				device.led4Off();
			}
			on btn1.turnedOn(): {
				device.led1On();
			}														
			on btn2.turnedOn(): {
				device.led2On();
			}														
			on btn3.turnedOn(): {
				device.led3On();
			}														
			on btn4.turnedOn(): {
				device.led4On();
			}														
		}
	}
}

component ledControlSystem{
	provides ILedsControl api;
	requires IButtonGlue button1;
	requires IButtonGlue button2;
	requires IButtonGlue button3;
	requires IButtonGlue button4;
	requires ILedsGlue leds;


	system {
		ledsControl lc;
		Button btn1;
		Button btn2;
		Button btn3;
		Button btn4;
		
		api <=> lc.api;
		button1 <=> btn1.glue;
		button2 <=> btn2.glue;
		button3 <=> btn3.glue;
		button4 <=> btn4.glue;
		leds <=> lc.device;
		lc.btn1 <=> btn1.api;
		lc.btn2 <=> btn2.api;
		lc.btn3 <=> btn3.api;
		lc.btn4 <=> btn4.api;			
	}	
}

