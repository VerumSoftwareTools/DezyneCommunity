 /*
  * U n i f o r m   e r r o r   r e p o r t i n g   a n d   r e c o v e r y
  * =======================================================================
  * Architectural pattern enabling uniform treatment of a group of requires 
  * ports in case one of the requires ports has reported an error.
  * 
  * Justification:
  * Error handling behaviour tends to complicate models and to distract from
  * functional behaviour. Error handling behaviour can easily outgrow functional
  * behaviour. A uniform policy for the error and recovery behaviour facet of
  * fallible components can help to
  * 1. minimize size and complexity of error handling behaviour, and
  * 2. separate error handling behaviour from functional behaviour.
  * 
  * Disclaimer:
  * This article provides an EXAMPLE of an interface behaviour pattern. It might
  * not meet all requirements for all applications. It serves to inspire and
  * should not be followed dogmatically.
  * 
  * High-level approach:
  * An 'error' event is sent by a component when it is no longer capable of
  * performing its normal operation. In order to restore normal operational
  * capability the client component shall perform the following procedure:
  * 1. Ensure component is no longer perfoming actions: call 'stop' and wait for
  *    the 'stopped' event;
  * 2. Make component recover from the error: call 'recover' and wait for the
  *    'recovered' event.
  * 
  * Key elements in uniform error handling:
  * 1. The 'stop' event is handled even in the 'Idle' state.
  * 2. The 'recover' event is handled even when component is functioning
  *    normally, i.e. faulty == false.
  * These two aspects allow components to maintain a minimal amount of state
  * administration about its requires ports. As soon as one of the requires
  * ports reports an error the component can recover from the error by
  * subsequently stopping and recovering all requires ports. This recovery
  * behaviour can largely be kept separate from the operational behaviour.
  */
 
interface IFallible {
  // events related to error handling
  out void error();
  in void recover();
  out void recovered();

  // events related to normal operation and to error handling   
  in void stop();
  out void stopped();

  // example events related to normal operation
  in void start();
  out void done();
   
  enum OperationalState {Idle, Busy, Stopping, Recovering};
   
  behaviour {
    OperationalState os = OperationalState.Idle;
    bool faulty = false;
     
    [os.Idle] {
    	on start: os = OperationalState.Busy;
    	on start: [faulty] illegal;
    	on stop: os = OperationalState.Stopping;
      on recover: os = OperationalState.Recovering;
    }
    [os.Busy] {
    	on start: illegal;
      on stop: os = OperationalState.Stopping;
    	on recover: illegal;
      on inevitable: {error; faulty = true;}
      on inevitable: {done; os = OperationalState.Idle;}
    }
    [os.Stopping] {
      on start, stop, recover: illegal;
      on inevitable: {stopped; os = OperationalState.Idle;}
    }
    [os.Recovering] {
    	on start, stop, recover: illegal;
      on inevitable: {recovered; os = OperationalState.Idle; faulty = false;}
      on inevitable: {error; os = OperationalState.Idle; faulty = true;}
    }
  }
}


/*
 * The following example component has been created to validate the usability of
 * the error handling and recovery behaviour aspect of the IFallible interface.
 */
component Director {
	provides IFallible ctrl;
	
 	requires IFallible left;
 	requires IFallible right;
 	
 	behaviour {
 		IFallible.OperationalState os = IFallible.OperationalState.Idle;
 		bool faulty = false;
 		subint Count {0..2};
 		Count nBusy = 0;
 		Count nRecovered = 0;
 		 		
 		[os.Idle || os.Busy] on ctrl.stop(): {left.stop(); right.stop(); os = IFallible.OperationalState.Stopping; nBusy = 2;}
 		
 		[os.Idle] {
 			on ctrl.start(): [!faulty] {left.start(); right.start(); nBusy = 2; os = IFallible.OperationalState.Busy;}
 			on ctrl.recover(): {left.recover(); right.recover(); nBusy = 2; os = IFallible.OperationalState.Recovering;}
 		}
 		[os.Busy] {
 			on left.done(), right.done(): {nBusy = nBusy - 1; if (nBusy == 0) {ctrl.done(); os = IFallible.OperationalState.Idle;}}
 		  on left.error(), right.error(): {ctrl.error(); faulty = true;}
 		}
 		[os.Stopping] {
 			on left.stopped(), right.stopped(): {nBusy = nBusy - 1; if (nBusy == 0) {ctrl.stopped(); os = IFallible.OperationalState.Idle;}}
 		}
 		[os.Recovering] {
 			on left.recovered(), right.recovered(): {
 				nBusy = nBusy - 1; nRecovered = nRecovered + 1; 
 				if (nBusy == 0) {
 					if (nRecovered == 2) {ctrl.recovered(); faulty = false;}
 					else ctrl.error(); 
 					os = IFallible.OperationalState.Idle;
 					nRecovered = 0;
 				}
 			}
 			on left.error(), right.error(): {
 				faulty = true;
 				nBusy = nBusy - 1;
 				if (nBusy == 0) {ctrl.error(); os = IFallible.OperationalState.Idle; nRecovered = 0;}
 			}
 		}
 	}
 }
