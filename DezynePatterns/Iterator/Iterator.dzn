
extern string $std::string$;

component myCollection
{
	provides IInit init;
	requires IIter iter;
	requires IObject object;

	behaviour
	{		
		enum State {OFFLINE, ONLINE};

		void initObjects() {
      		string id;
      		bool more = iter.nextObject(id);
      		if (more) {
      			bool skip_init = object.started(id);
      			if (!skip_init) object.init(id);
        		initObjects(); // tail recursion      	
      		}
    	}
    	
    	bool allObjectsStarted() {
      		string id;
      		bool result = object.started(id);
			if (result) {
	      		bool more = iter.nextObject(id);
    	  		if (more) {
        			result = allObjectsStarted(); // tail recursion      	
      			}
			}
      		return result;
    	}
    	
		on init.start(): initObjects();
		on init.allStarted(): {bool result = allObjectsStarted(); reply (result);}
	}
}

interface IIter
{
	subint number {0..9};
	in void myId(out string Id);		// provides Id of this Object
	in number numObjects();
	in bool nextObject(out string Id);	// provides Id of an Object, could also be pointer
	behaviour
	{
		number numberOfObjects = 4; // must be <= 9
		number object = 0;
		on myId: {}
		on numObjects: {reply(numberOfObjects);}
		on nextObject: {
			if(object < numberOfObjects){
				object = object + 1;
				reply(true);
			} else {
				reply(false);
			}
		}
	}
}

component Iter
{ // Handwritten
	provides IIter iter;
}

interface IInit
{
	in void start();
	in bool allStarted();
	behaviour {
		on start: {}
		on allStarted: {reply (true);}
		on allStarted: {reply (false);}
	}
}

interface IObject
{
	in void init (string id);
	in bool started (string id);
	
	behaviour {
		bool initialized = false;
		[!initialized] on init: {}
		[initialized] on init: illegal; 
		on started: {reply (true);}
		on started: {reply (false);}
	}
}